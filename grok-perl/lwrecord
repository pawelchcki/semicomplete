#!/usr/bin/perl
#(~/projects/logwatch) % ./lwrecord -f testing "hello  once uppon" "`date`"

use strict;
use warnings;

use Getopt::Std;
use Data::Dumper;
#use DB_File;
use Storable qw(store lock_store freeze thaw retrieve);

# Handle storing whatever we want?
# It's hard to say how we can store "whatever"
#
# Store items by time.
# Retrieve items by time periods

# key spec:
# foo/bar/baz implies $storage->{foo}->{bar}->{baz} = data ?

# Store login attempts by user:
# lwstore -t array "ssh_attempts/%IP%" "%USER"

my $prog = $0;
$prog =~ s,^.*/,,;

# Options...
# -F == fetch db
# -f == db file
# -d = date
# -t = type (necessary?)
# -N = no split key
# -s = set split token
# -h = display help
my $opts = {};
getopts("Ff:d:t:Ns:h", $opts);
$opts->{"F"} = 1 if ($prog eq 'lwfetch');

usage() && exit(0) if ($opts->{"h"});

my $key = $ARGV[0];
my $data = $ARGV[1];
my $dbfile = $opts->{"f"} || "happydb";
my $type = $opts->{"t"} || "log";
my $time = $opts->{"d"} || time();
my $splitstr = $opts->{"s"} || "/";
my $splitkey = !($opts->{"N"});

my $db = {};
$db = retrieve($dbfile) if (-r $dbfile);
my $dbref = $db;

if (defined($key) && ($splitkey)) {
	# Split the key and make a tree structure in our hash.
	my @s = split($splitstr,$key);
	foreach (@s[0..($#s-1)]) {
		$dbref->{$_} ||= {};
		$dbref = $dbref->{$_};
	}
	$key = $s[$#s];
}

if ($opts->{"F"}) {
	print Dumper( ($key) ? $dbref->{$key} : $db);
} else {
	print STDERR "No key and value specified\n" and usage() and exit(1)
		unless defined($key) && defined($data);

	push(@{$dbref->{$key}}, { time => $time, data => $data});
	lock_store($db, $dbfile)
}


sub usage {
	print << "USAGE";
$0 [-F] [-f dbfile] [-d datestamp] [-N] [-s X] [-h] <key> <value>
	-F         Fetch the database
	-f file    Specify the file to store/retrieve data from
	-d date    Specify the time to use instead of current time
	-N         Don't split the key
	-s X       Split key on string X. Defaults to '/'
	-h         Show this helpful message!
USAGE
}
